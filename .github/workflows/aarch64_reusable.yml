name: AArch64 Reusable workflow

on:
  workflow_call:
    inputs:
      extra_envs:
        required: false
        type: string
      exec_command:
        required: true
        type: string
      deploy_command:
        required: false
        type: string
      remote_runtime_docker:
        required: false
        type: string
      runtime_base_image:
        required: false
        type: string
    secrets:
      ALIYUN_DOCKER_USERNAME:
        required: false
      ALIYUN_DOCKER_PASSWORD:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false

jobs:
  CPU:
    if: github.repository == 'alibaba/BladeDISC'
    # The type of runner that the job will run on
    runs-on: [self-hosted, aarch64]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Build Dev Docker
      run: |
        set -e
        git submodule sync
        git submodule update --depth=1 --init --recursive
        docker build -t disc-dev-cpu \
          --build-arg BASEIMAGE=ubuntu20.04 \
          --build-arg DISC_HOST_TF_VERSION="tensorflow==2.8" \
          -f docker/dev/Dockerfile.aarch64 .
    - name: Build And Test DISC
      run: |
        set -e
        docker run --rm -t --user $(id -u) \
          -v $HOME/.cache:$HOME/.cache \
          -v /etc/passwd:/etc/passwd:ro \
          -v /etc/group:/etc/group:ro \
          -v $PWD:/disc \
          -e GITHUB_WORKFLOW=$GITHUB_WORKFLOW \
          ${{ inputs.extra_envs }} \
          -w /disc \
          disc-dev-cpu ${{ inputs.exec_command }}
    - name: Deploy Docker Image
      if: github.event.ref == 'refs/heads/main'
      env:
        ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
        ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        GITHUB_PULL_REQUEST: ${{ github.event.number }}
        REMOTE_RUNTIME_DOCKER: ${{ inputs.remote_runtime_docker }}
        RUNTIME_BASEIMAGE: ${{ inputs.runtime_base_image }}
      run: |
        set -e
        if [[ ! -z "${{ inputs.deploy_command }}" ]]; then
          echo "executing runtime Docker deployment"
          ${{ inputs.deploy_command }}
        fi
