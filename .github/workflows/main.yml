# This is a basic workflow that is manually triggered

name: DISC 

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  CUDA10-TF115:
    # The type of runner that the job will run on
    runs-on: [self-hosted, gpu-t4]
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Build Dev Docker
      shell: bash
      run: |
        set -e
        git submodule sync
        git submodule update --depth=1 --init --recursive
        docker build -t disc-dev-cuda10 --build-arg BASEIMAGE=nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04 -f docker/dev/Dockerfile .
    - name: Build And Test DISC
      run: |
        set -e
        nvidia-docker run --rm -t --user $(id -u) \
          -v $HOME/.cache:$HOME/.cache \
          -v /etc/passwd:/etc/passwd:ro \
          -v /etc/group:/etc/group:ro \
          -v $PWD:/disc \
          -e GITHUB_WORKFLOW=$GITHUB_WORKFLOW \
          -w /disc \
          disc-dev-cuda10 bash ./scripts/ci/build_and_test.sh
    - name: Deploy Docker
      if: github.event.ref == 'refs/heads/main'
      env:
        ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
        ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        GITHUB_PULL_REQUEST: ${{ github.event.number }}
        LOCAL_DEV_DOCKER: disc-dev-cuda10
        REMOTE_DEV_DOCKER: bladedisc:latest-devel-cuda10
        REMOTE_RUNTIME_DOCKER: bladedisc:latest-runtime-tf115
        RUNTIME_BASEIMAGE: tensorflow/tensorflow:1.15.5-gpu
      run: |
        set -e
        bash ./scripts/ci/deploy_docker.sh
  CUDA11-TF24:
    # The type of runner that the job will run on
    runs-on: [self-hosted, gpu-t4]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Build Dev Docker
      run: |
        set -e
        git submodule sync
        git submodule update --depth=1 --init --recursive
        docker build -t disc-dev-cuda11.0 --build-arg BASEIMAGE=nvidia/cuda:11.0-cudnn8-devel-ubuntu18.04 -f docker/dev/Dockerfile .
    - name: Build And Test DISC
      run: |
        set -e
        nvidia-docker run --rm -t --user $(id -u) \
          -v $HOME/.cache:$HOME/.cache \
          -v /etc/passwd:/etc/passwd:ro \
          -v /etc/group:/etc/group:ro \
          -v $PWD:/disc \
          -e GITHUB_WORKFLOW=$GITHUB_WORKFLOW \
          -w /disc \
          disc-dev-cuda11.0 bash ./scripts/ci/build_and_test.sh
    - name: Deploy Docker
      if: github.event.ref == 'refs/heads/main'
      env:
        ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
        ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        GITHUB_PULL_REQUEST: ${{ github.event.number }}
        LOCAL_DEV_DOCKER: disc-dev-cuda11.0
        REMOTE_DEV_DOCKER: bladedisc:latest-devel-cuda11.0
        REMOTE_RUNTIME_DOCKER: bladedisc:latest-runtime-tf24
        RUNTIME_BASEIMAGE: tensorflow/tensorflow:2.4.0-gpu
      run: |
        set -e
        bash ./scripts/ci/deploy_tf_wrapper.sh
  CUDA11-TORCH171:
    # The type of runner that the job will run on
    runs-on: [self-hosted, gpu-t4]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Build Dev Docker
      run: |
        set -e
        git submodule sync
        git submodule update --depth=1 --init --recursive
        docker build -t disc-dev-cuda11.0 --build-arg BASEIMAGE=nvidia/cuda:11.0-cudnn8-devel-ubuntu18.04 -f docker/dev/Dockerfile .
    - name: Build and Test DISC
      run: |
        set -e
        nvidia-docker run --rm -t --user $(id -u) \
          -v $HOME/.cache:$HOME/.cache \
          -v /etc/passwd:/etc/passwd:ro \
          -v /etc/group:/etc/group:ro \
          -v $PWD:/disc \
          -e GITHUB_WORKFLOW=$GITHUB_WORKFLOW \
          -w /disc \
          disc-dev-cuda11.0 bash ./scripts/ci/test_pytorch_blade.sh
    - name: Deploy PyTorch Blade
      if: github.event.ref == 'refs/heads/main'
      env:
        ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
        ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        GITHUB_PULL_REQUEST: ${{ github.event.number }}
        LOCAL_DEV_DOCKER: disc-dev-cuda11.0
        REMOTE_DEV_DOCKER: bladedisc:latest-devel-cuda11.0
        REMOTE_RUNTIME_DOCKER: bladedisc:latest-runtime-torch1.7.1
        RUNTIME_BASEIMAGE: pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime
      run: |
        set -e
        bash ./scripts/ci/deploy_pytorch_blade.sh .sh
  CPU:
    # The type of runner that the job will run on
    runs-on: [self-hosted, cpu]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Build Dev Docker
      run: |
        set -e
        git submodule sync
        git submodule update --depth=1 --init --recursive
        docker build -t disc-dev-cpu --build-arg BASEIMAGE=nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04 -f docker/dev/Dockerfile .
    - name: Build And Test DISC
      run: |
        # TODO(yancey.yx): enable CPU unit test
        #set -e
        #docker run --rm -t --user $(id -u) \
        #  -v $HOME/.cache:$HOME/.cache \
        #  -v /etc/passwd:/etc/passwd:ro \
        #  -v /etc/group:/etc/group:ro \
        #  -v $PWD:/disc \
        #  -e GITHUB_WORKFLOW=$GITHUB_WORKFLOW \
        #  -w /disc \
        #  disc-dev-cpu bash ./scripts/ci/build_and_test.sh --cpu-only
