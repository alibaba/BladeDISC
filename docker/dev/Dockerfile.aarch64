ARG BASEIMAGE=ubuntu:20.04
FROM ${BASEIMAGE}

ARG DISC_HOST_TF_VERSION=""
ENV DISC_HOST_TF_VERSION="${DISC_HOST_TF_VERSION}"

COPY sources.list /etc/apt/sources.list

RUN apt-get -y update && \
    apt-get -y install software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test && \
    apt-get -y install \
      accountsservice \
      apport \
      at \
      autoconf \
      automake \
      bc \
      build-essential \
      cmake \
      cpufrequtils \
      curl \
      ethtool \
      g++-9 \
      gcc-7 \
      gcc-9 \
      gcc-10 \
      g++-10 \
      gettext-base \
      gfortran-9 \
      gfortran-10 \
      git \
      iproute2 \
      iputils-ping \
      lxd \
      libbz2-dev \
      libc++-dev \
      libcgal-dev \
      libffi-dev \
      libfreetype6-dev \
      libhdf5-dev \
      libjpeg-dev \
      liblzma-dev \
      libncurses5-dev \
      libncursesw5-dev \
      libpng-dev \
      libreadline-dev \
      libssl-dev \
      libsqlite3-dev \
      libtool \
      libxml2-dev \
      libxslt-dev \
      locales \
      lsb-release \
      lvm2 \
      moreutils \
      net-tools \
      open-iscsi \
      openjdk-8-jdk \
      openssl \
      pciutils \
      policykit-1 \
      python3 \
      python3-dev \
      python3-distutils \
      python3-venv \
      python3-pip \
      python-openssl \
      rsync \
      rsyslog \
      snapd \
      scons \
      ssh \
      sudo \
      swig \
      time \
      udev \
      unzip \
      ufw \
      uuid-runtime \
      vim \
      wget \
      xz-utils \
      zip \
      zlib1g-dev \
      openjdk-11-jdk \
      patchelf \
      pkg-config

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 1 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 1 && \
    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-10 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# RUN wget -O /usr/local/bin/bazel http://bladedisc-ci.oss-cn-hongkong.aliyuncs.com/download/bazel/bazel-5.1.1-linux-arm64
RUN wget -O /usr/local/bin/bazel https://releases.bazel.build/6.1.0/release/bazel-6.1.0-linux-arm64

RUN mkdir -p ~/.pip && \
    echo "[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n\n[install]\ntrusted-host=mirrors.aliyun.com\n" > ~/.pip/pip.conf

RUN pip3 install --upgrade pip

COPY docker/scripts/install-python-aarch64.sh /install/scripts/install-python-aarch64.sh
RUN bash /install/scripts/install-python-aarch64.sh

RUN chmod a+x /usr/local/bin/bazel

# using `tf.load_op_library('`libtao_ops.so')` enconters following error on aarch64:
#   `/lib/aarch64-linux-gnu/libgomp.so.1: cannot allocate memory in static TLS block`
#
# Following is a workaround for the above problem according to `https://bugzilla.redhat.com/show_bug.cgi?id=1722181`
ENV LD_PRELOAD="/usr/lib/aarch64-linux-gnu/libgomp.so.1:${LD_PRELOAD}"
