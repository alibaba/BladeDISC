/// Pre-defined custom call prototypes
///
/// const std::string kDefaultHelperFunctionDeclarations = R"pdll(
///   Rewrite PackValue_1(tag : Attr, v0 : Value) -> ValueRange;
///   Rewrite PackValue_2(tag : Attr, v0 : Value, v1 : Value) -> ValueRange;
///   Rewrite UnpackValue_1(v : ValueRange) -> (Value);
///   Rewrite UnpackValue_2(v : ValueRange) -> (Value, Value);
///   Rewrite CreateTorchCustomCall(tag : Attr, inputs : ValueRange, outputs : ValueRange) -> (op: Op, new_outputs : ValueRange);
///   Rewrite SetAttr(op : Op, key : Attr, value : Attr);
///   Rewrite SetCustomAttr(op : Op, key : Attr, value : Attr);
/// )pdll";

// A new Pattern
Pattern TorchConvReluOp {
  /// match phase: define the pattern
  let conv2d = op<torch.aten.conv2d>(
      input : Value,
      weight : Value,
      bias : Value,
      stride : Value,
      padding : Value,
      output_padding : Value,
      groups : Value
   );
   let relu = op<torch.aten.relu>(conv2d.0);
   CheckTorchNone(bias);
   CheckTorchConstantIntList(stride);
   CheckTorchConstantIntList(padding);
   CheckTorchConstantIntList(output_padding);
   CheckTorchConstantInt(groups);

  /// rewrite phase
  rewrite relu with {
    /// 1. create custom call op
    let inputs = PackValue_2(attr<"\"in\"">, input, weight);
    let outputs = PackValue_1(attr<"\"out\"">, relu.0);
    let infos = CreateTorchCustomCall(attr<"\"op\"">, inputs, outputs);

    /// 2. set attrs that are used by bladedisc.
    SetAttr(infos.op, attr<"\"call_target_name\"">, attr<"\"disc.custom_call.torch.fused_conv_relu\"">);
    SetAttr(infos.op, attr<"\"input_placements\"">, attr<"\"h,h\"">);
    SetAttr(infos.op, attr<"\"output_placements\"">, attr<"\"h\"">);
    SetAttr(infos.op, attr<"\"device\"">, attr<"\"h\"">);
    SetAttr(infos.op, attr<"\"input_layouts\"">, attr<"\"NCHW,NCHW\"">);
    SetAttr(infos.op, attr<"\"output_layouts\"">, attr<"\"NCHW\"">);
    SetAttr(infos.op, attr<"\"expected_input_layouts\"">, attr<"\"NCHW,NCHW\"">);
    SetAttr(infos.op, attr<"\"expected_output_layouts\"">, attr<"\"NCHW\"">);

    /// 3. set attrs that are directly passed to the custom call kernel.
    let stride_attr = ConvertTorchConstantIntListToI64DenseElemsAttr(stride);
    let padding_attr = ConvertTorchConstantIntListToI64DenseElemsAttr(padding);
    let groups_attr = ConvertTorchConstantIntToI64Attr(groups);
    SetCustomAttr(infos.op, attr<"\"stride\"">, stride_attr);
    SetCustomAttr(infos.op, attr<"\"padding\"">, padding_attr);
    SetCustomAttr(infos.op, attr<"\"groups\"">, groups_attr);
    SetCustomAttr(infos.op, attr<"\"data_format\"">, attr<"\"NCHW\"">);

    let rs = UnpackValue_1(infos.new_outputs);
    replace relu with rs;
  };
}