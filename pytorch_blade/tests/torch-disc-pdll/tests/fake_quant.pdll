/// Pre-defined custom call prototypes
///
/// const std::string kDefaultHelperFunctionDeclarations = R"pdll(
///   Rewrite PackValue_1(tag : Attr, v0 : Value) -> ValueRange;
///   Rewrite PackValue_2(tag : Attr, v0 : Value, v1 : Value) -> ValueRange;
///   Rewrite UnpackValue_1(v : ValueRange) -> (Value);
///   Rewrite UnpackValue_2(v : ValueRange) -> (Value, Value);
///   Rewrite CreateTorchCustomCall(tag : Attr, inputs : ValueRange, outputs : ValueRange) -> (op: Op, new_outputs : ValueRange);
///   Rewrite SetAttr(op : Op, key : Attr, value : Attr);
///   Rewrite SetCustomAttr(op : Op, key : Attr, value : Attr);
/// )pdll";

// A new Pattern
Pattern TorchFakeQuantOp {
  /// match phase: define the pattern
  let fake_quant_op = op<torch.operator>(
    input: Value,
    scale: Value,
    zero_point: Value,
    quant_min: Value,
    quant_max: Value,
    num_bits: Value,
    axis: Value,
    signed: Value,
    symmetric: Value,
    dynamic: Value,
    per_channel: Value
  ) -> (result: TypeRange);

  CheckTorchOperator(fake_quant_op, attr<"\"torch_blade.fake_quant\"">);

  /// rewrite phase
  rewrite fake_quant_op with {

    let inputs_quantize = PackValue_11(attr<"\"in\"">, input, scale, zero_point, quant_min, quant_max, num_bits, axis, signed, symmetric, dynamic, per_channel);
    let outputs_quantize = PackValue_1(attr<"\"out\"">, fake_quant_op.0);
    let quantize_op = CreateTorchQuantDequantOp(attr<"\"op\"">, inputs_quantize, outputs_quantize, attr<"\"torch_blade.quantize\"">);

    let quantize_rs = UnpackValue_1(quantize_op.new_outputs);

    let inputs_dequantize = PackValue_11(attr<"\"in\"">, quantize_rs, scale, zero_point, quant_min, quant_max, num_bits, axis, signed, symmetric, dynamic, per_channel);
    let outputs_dequantize = PackValue_1(attr<"\"out\"">, fake_quant_op.0);
    let dequantize_op = CreateTorchQuantDequantOp(attr<"\"op\"">, inputs_dequantize, outputs_quantize, attr<"\"torch_blade.dequantize\"">);

    let dequantize_rs = UnpackValue_1(dequantize_op.new_outputs);

    replace fake_quant_op with dequantize_rs;
  };
}