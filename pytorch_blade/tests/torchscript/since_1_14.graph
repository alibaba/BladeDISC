// RUN: shape_analysis_tool --since 1.14.0 -f %s | FileCheck %s

// CHECK-LABEL: graph
graph(%self: Float(*, *)):
  %cst0  : int = prim::Constant[value=0]()
  %cst1  : int = prim::Constant[value=1]()
  %cst32 : int = prim::Constant[value=32]()
  %cst512: int = prim::Constant[value=512]()
  %sizes : int[] = prim::ListConstruct(%cst32, %cst512, %cst1)
  %dims  : int[] = prim::ListConstruct(%cst0, %cst1)
// CHECK: Float(*, *, *) = prims::broadcast_in_dim
  %1 : Tensor = prims::broadcast_in_dim(%self, %sizes, %dims)
  return (%1)

// CHECK-LABEL: graph
graph(%p1 : Float(*, *, *, *)):
  %true: bool = prim::Constant[value=1]()
  %cst_1: int = prim::Constant[value=-1]()
  %dims : int[] = prim::ListConstruct(%cst_1)
// CHECK: Float(*, *, *, *) = aten::amax
  %1 : Tensor = aten::amax(%p1, %dims, %true)
  return (%1)

// CHECK-LABEL: graph
graph(%p1 : Float(*, *, *)):
  %cst0 : int = prim::Constant[value=0]()
  %cst2 : int = prim::Constant[value=2]()
  %false: bool = prim::Constant[value=0]()
  %dims: int[] = prim::ListConstruct(%cst2)
// CHECK: Float(*, *) = aten::var
  %1 : Tensor = aten::var(%p1, %dims, %cst0, %false)
  return (%1)

// CHECK-LABEL: graph
graph(%p1 : Half(2, 3, 1, 1)):
  %1 : int[] = prim::Constant[value=[2, 3]]()
// CHECK: Half(2, 3, strides=[3, 1]) = aten::squeeze
  %squeeze.1 : Tensor = aten::squeeze(%p1, %1) # <eval_with_key>.1228:16:14
  return (%squeeze.1)

// CHECK-LABEL: graph
graph(%p1 : Half(*, *)):
  %1 : int = prim::Constant[value=2]()
// CHECK: Half(*, *, *) = aten::unsqueeze
  %unsqueeze.1 : Tensor = aten::unsqueeze(%p1, %1) # <eval_with_key>.1228:16:14
  return (%unsqueeze.1)

// CHECK-LABEL: graph
graph(%p1 : Half(2, *, 8, 80)):
  %1 : int[] = prim::Constant[value=[0, 2, 1, 3]]()
// CHECK: Half(2, 8, *, 80) = aten::permute
  %permute.1 : Tensor = aten::permute(%p1, %1) # <eval_with_key>.1228:16:14
  return (%permute.1)

// CHECK-LABEL: graph
graph(%p : Half(*, *),
      %p1 : Long(*, *),
      %p2 : Long(*)):
  %none : None = prim::Constant()
  %list : Tensor?[] = prim::ListConstruct(%none, %none, %p1, %p2)
// CHECK: Half(*, *) = aten::index
  %2 : Tensor = aten::index(%p, %list)
  return (%2)

// CHECK-LABEL: graph
graph(%input : Half(2, 320, 64, 64, strides=[1310720, 4096, 64, 1], device=cuda:0)):
  %dims : int[] = prim::Constant[value=[0, 1]]()
  %false : bool = prim::Constant[value=0]()
  %none : None = prim::Constant()
// CHECK: Half(64, 64, strides=[64, 1], device=cuda:0) = aten::sum
  %result : Tensor = aten::sum(%input, %dims, %false, %none)
  return (%result)


// CHECK-LABEL: graph
graph(%input : Half(2, 320, 64, 64, strides=[1310720, 4096, 64, 1], device=cuda:0)):
  %cst1 : int = prim::Constant[value=1]()
  %cst100 : int = prim::Constant[value=100]()
  %tensors : Tensor[] = aten::split(%input, %cst100, %cst1)
// CHECK: %4 : Half(2, 100, 64, 64, strides=[1310720, 4096, 64, 1], device=cuda:0), %5 : Half(2, 100, 64, 64, strides=[1310720, 4096, 64, 1], device=cuda:0), %6 : Half(2, 100, 64, 64, strides=[1310720, 4096, 64, 1], device=cuda:0), %7 : Half(2, 20, 64, 64, strides=[1310720, 4096, 64, 1], device=cuda:0) = prim::ListUnpack(%3)
  %t1 : Tensor, %t2 : Tensor , %t3 : Tensor, %t4 : Tensor = prim::ListUnpack(%tensors)
  return (%t1, %t2, %t3, %t4)