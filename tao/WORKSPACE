workspace(name = "org_tao_bridge")

# Initialize the tao_bridge repository and all dependencies.
#
# The cascade of load() statements and workspace?() calls works around the
# restriction that load() statements need to be at the top of .bzl files.
# E.g. we can not retrieve a new repository with http_archive and then load()
# a macro from that repository in the same file.

load("@//:workspace2.bzl", "tao_bridge_workspace2")

tao_bridge_workspace2()

load("@//:workspace1.bzl", "tao_bridge_workspace1")

tao_bridge_workspace1()

load("@//:workspace0.bzl", "tao_bridge_workspace0")

tao_bridge_workspace0()

load("@local_config_blade_service_common//:blade_service_common_workspace.bzl", "blade_service_common_workspace")

blade_service_common_workspace()

load("@local_config_tf_protobuf//:tf_protobuf_workspace.bzl", "tf_protobuf_workspace")

tf_protobuf_workspace()

load("@local_config_tf_source//:tf_source_workspace1.bzl", "tf_source_workspace1")

tf_source_workspace1()

load("@local_config_tf_source//:tf_source_workspace0.bzl", "tf_source_workspace0")

tf_source_workspace0()

# NOTE(lanbo.llb): This logic of load tf's workspaces can only happen here
# each workspace func should be executed directly after load.
# Also load in .bzl can only be at top level, making these logic can only happend here
# otherwise bazel will detect `cycle in workspace files`.
# NOTE(lanbo.llb): Since r2.5.0 tf break single workspace.bzl into 4 workspacex.bzls
# when build for 2.4.x, we should comment the lines below to make it work
# Initialize TensorFlow's external dependencies.
load("@org_tensorflow//tensorflow:workspace3.bzl", "tf_workspace3")

tf_workspace3()

load("@org_tensorflow//tensorflow:workspace2.bzl", "tf_workspace2")

tf_workspace2()

load("@org_tensorflow//tensorflow:workspace1.bzl", "tf_workspace1")

tf_workspace1()

load("@org_tensorflow//tensorflow:workspace0.bzl", "tf_workspace0")

tf_workspace0()

load("@org_third_party//bazel:blade_disc_dnn_workspace.bzl", "blade_disc_dnn_workspace")

blade_disc_dnn_workspace()
