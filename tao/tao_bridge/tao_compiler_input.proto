syntax = "proto3";

package tensorflow.tao;
option cc_enable_arenas = true;

// TODO(fanpf): avoid using int32 for enum types in proto. These enum values may
// change in new version of tensorflow. And we may not find these changes
// immediately if we use int32. We should do the value mapping explictily in
// compiler.

// Compiler Options
message OptionsProto {
  // Name of the compilation device to use. It must be set by the caller.
  // The default empty value is invalid.
  string device_type = 1;

  // The device to use during compi`lation to execute instructions on, for
  // example for auto-tuning.
  // Valid values are defined by `xla::Backend::devices_ordinal_supported()`.
  // -1 indicates the default device should be used.
  int32 device_ordinal = 2;

  // Function library in which to find function definitions. Must be non-null.
  // Proto version of FunctionDefLibrary
  bytes flib_def = 3;

  // The graph def version to be compiled.
  int32 graph_def_version = 4;

  // If 'allow_cpu_custom_calls' is true, kernels may make use of CustomCall()
  // for CPU.
  bool allow_cpu_custom_calls = 5;

  uint64 func_hash = 6;

  // If `use_tuple_arg` is true, a single tuple parameter will be used for all
  // arguments; if false, each argument gets its own parameter.
  bool use_tuple_arg = 11;

  // If 'return_updated_values_for_all_resources' is true, then updated
  // values of all resource arguments will be included in the
  // 'resource_updates' of the computation, even if the resource was not
  // modified by the computation. Used when compiling loop bodies to ensure
  // the input and output signatures match.
  bool return_updated_values_for_all_resources = 12;

  // If 'resolve_compile_time_constants' is true, then outputs of a
  // computation that are known to be compile-time constants will be returned
  // as Tensors at compile-time, rather than as run-time outputs of the
  // computation.
  bool resolve_compile_time_constants = 13;

  // If 'always_return_tuple' is true, then the output of a computation will
  // always be a tuple. Otherwise, a single-element output will not be wrapped
  // in a tuple.
  bool always_return_tuple = 14;

  // True when compiling the entry computation, false for subcomputations
  // (while, call, etc.)
  bool is_entry_computation = 15;

  // placements of the cluster's outputs.
  repeated string output_placements = 16;
};

// Why assign the enum value starting from 10: Forbid using their int values
// directly. Do the mapping explictily in case their int values changes in
// different versions of tensorflow.
enum ArgumentKind {
  // The first enum value must be zero in proto3
  // Just a dummy value. Don't use.
  kArgumentKindDumy = 0;
  kInvalid = 10;
  kConstant = 11;
  kResource = 12;
  kConstantResource = 13;
  kParameter = 14;
  kToken = 15;
  kTensorList = 16;
  kFixedShaped = 17;
  kHostArgs = 18;
};

// Why assign the enum value starting from 10: Forbid using their int values
// directly. Do the mapping explictily in case their int values changes in
// different versions of tensorflow.
enum ArgumentResourceKind {
  // The first enum value must be zero in proto3
  // Just a dummy value. Don't use.
  kArgumentResourceKindDumy = 0;
  // enum name need to be unique under one namespace
  kInvalidResourceKind = 10;
  kVariable = 11;
  kTensorArray = 12;
  kStack = 13;
};

// Infos of arguments of an XLA Cluster
message ArgumentProto {
  reserved 1;
  reserved "kind";
  ArgumentKind kind_v2 = 10;

  // The type of the argument(int/float/etc.). If the argument is a resource,
  // this is the type of the variable's value, not DT_RESOURCE.
  int32 type = 2;

  // The shape of the argument. For:
  // * a parameter: the shape of the parameter.
  // * a constant: ignored; the shape given by constant_value is used
  //     instead.
  // * an uninitialized resource: ignored. We don't yet know the shape of an
  //     uninitialized resource (otherwise we would have initialized it!)
  // * an initialized variable: the shape of the variable's value.
  // * an initialized TensorArray or Stack resource: the shape of an entry in
  //   the TensorArray/Stack. Note this is the size of a single entry, not the
  //   XLA data structure that represents the complete stack/array.
  bytes shape = 3;

  // The value of the argument, if it is a compile-time constant. Must be a
  // host-memory tensor.
  bytes constant_value = 4;

  // The name of this argument, used for debugging.
  string name = 5;

  // For a kResource, what kind of resource is it?
  reserved "resource_kind";
  reserved 6;
  ArgumentResourceKind resource_kind_v2 = 11;

  // For a kResource, has this resource been initialized?
  bool initialized = 7;

  // For a TensorArray or Stack resource, what is the array's declared size?
  // (Used for lazy initialization.)
  // renamed as max_array_size in tf2
  int64 tensor_array_size = 8;

  // TensorArray resource parameters are passed as (array, gradient array 0,
  // ..., gradient array k), where the gradient arrays are in the same order
  // as `tensor_array_gradients`.
  repeated string tensor_array_gradients = 9;
};

message TaoCompilerInput {
  // Specify compiler configurations
  OptionsProto options = 1;

  // Proto version of NameAttrList
  // Specify which function to compile.
  // Function library in which to find this function definitions
  // is defined in the `options` fileds.
  bytes function = 2;

  // infos for arguments of the function to compile
  repeated ArgumentProto args = 3;

  // env var for tao_compiler_main subprocess.
  map<string, string> env = 4;
};
