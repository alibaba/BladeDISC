Pattern TFQuantizedConv2dI8 {
  /// match phase: define the pattern
  let inputDequant = op<mhlo_disc.dequantize>(input : Value, inputScale : Value, inputZeroPoint : Value);

  let weightDequant = op<mhlo_disc.dequantize>(weight : Value, weightScale : Value, weightZeroPoint : Value);

  let padding_attr : Attr;
  let strides_attr : Attr;
  let conv2d = op<tf.Conv2D>(inputDequant.0, weightDequant.0) {
    padding = padding_attr,
    strides = strides_attr
  };

  let resultQuant = op<mhlo_disc.quantize>(conv2d.0, resultScale : Value, resultZeroPoint : Value);

  /// rewrite phase
  rewrite resultQuant with {
    /// 1. create custom call op
    let inputs = PackValue_8(
        attr<"\"in\"">,
        input, weight,
        inputScale, inputZeroPoint,
        weightScale, weightZeroPoint,
        resultScale, resultZeroPoint
    );
    let outputs = PackValue_1(attr<"\"out\"">, resultQuant.0);
    let infos = CreateCustomCall(attr<"\"op\"">, inputs, outputs);

    /// 2. set attrs that are used by bladedisc.
    SetAttr(infos.op, attr<"\"call_target_name\"">, attr<"\"ral_pdll_qconv2d\"">);
    SetAttr(infos.op, attr<"\"device\"">, attr<"\"h\"">);
    SetAttr(infos.op, attr<"\"input_placements\"">, attr<"\"h,h,s,s,s,s,s,s\"">);
    SetAttr(infos.op, attr<"\"output_placements\"">, attr<"\"h\"">);
    SetAttr(infos.op, attr<"\"input_layouts\"">, attr<"\"*,*,*,*,*,*,*,*\"">);
    SetAttr(infos.op, attr<"\"output_layouts\"">, attr<"\"*\"">);
    SetAttr(infos.op, attr<"\"expected_input_layouts\"">, attr<"\"*,*,*,*,*,*,*,*\"">);
    SetAttr(infos.op, attr<"\"expected_output_layouts\"">, attr<"\"*\"">);

    /// 3. set attrs that are directly passed to the custom call kernel.
    SetCustomAttr(infos.op, attr<"\"strides\"">, strides_attr);
    SetCustomAttr(infos.op, attr<"\"padding\"">, padding_attr);
    let data_format_attr = GetAttrOrDefault(conv2d, attr<"\"data_format\"">, attr<"\"NHWC\"">);
    SetCustomAttr(infos.op, attr<"\"data_format\"">, data_format_attr);
    let dilations_attr = GetAttrOrDefault(conv2d, attr<"\"dilations\"">, attr<"[1,1,1,1]">);
    SetCustomAttr(infos.op, attr<"\"dilations\"">, dilations_attr);
    let explicit_paddings = GetAttrOrDefault(conv2d, attr<"\"explicit_paddings\"">, attr<"[]">);
    SetCustomAttr(infos.op, attr<"\"explicit_paddings\"">, explicit_paddings);
    SetCustomAttr(infos.op, attr<"\"weight_is_const\"">, IsConstantTensor(weight));

    let rs = UnpackValue_1(infos.new_outputs);
    replace resultQuant with rs;
  };
}
