diff --git a/src/cpu/kernels/CpuWinogradConv2dKernel.cpp b/src/cpu/kernels/CpuWinogradConv2dKernel.cpp
index 803af09..9498163 100644
--- a/src/cpu/kernels/CpuWinogradConv2dKernel.cpp
+++ b/src/cpu/kernels/CpuWinogradConv2dKernel.cpp
@@ -222,6 +222,7 @@ void CpuWinogradConv2dTransformWeightsKernel<T, OutputTileRows, OutputTileCols,
     ARM_COMPUTE_UNUSED(weights_hwio, output);
 
     _transform           = std::make_unique<WeightsTransform>(num_output_channels, num_input_channels);
+    _num_input_channels = num_input_channels;
     _num_output_channels = num_output_channels;
     _matrix_stride       = matrix_stride;
 
@@ -245,12 +246,13 @@ void CpuWinogradConv2dTransformWeightsKernel<T, OutputTileRows, OutputTileCols,
     const ITensor *weights_hwio = tensors.get_const_tensor(TensorType::ACL_SRC);
     ITensor       *output       = tensors.get_tensor(TensorType::ACL_DST);
 
-    _transform->set_weight_tensor(weights_hwio->buffer());
+    auto transform = std::make_unique<WeightsTransform>(_num_output_channels, _num_input_channels);
+    transform->set_weight_tensor(weights_hwio->buffer());
     const int matrix_row_stride = roundup(_num_output_channels, WinogradConv::N_BLOCK);
-    _transform->set_output_matrices(output->buffer(), _matrix_stride, matrix_row_stride);
-    _transform->set_working_space(output->buffer());
+    transform->set_output_matrices(output->buffer(), _matrix_stride, matrix_row_stride);
+    transform->set_working_space(output->buffer());
 
-    _transform->run(fst, lst);
+    transform->run(fst, lst);
 }
 
 template <typename T, int OutputTileRows, int OutputTileCols, int KernelRows, int KernelCols>
@@ -346,7 +348,8 @@ void CpuWinogradConv2dTransformInputKernel<T, OutputTileRows, OutputTileCols, Ke
     const int padding_bottom = (padding == PADDING_SAME) ? iceildiv(KernelRows - 1, 2) : 0;
     const int padding_right  = (padding == PADDING_SAME) ? iceildiv(KernelCols - 1, 2) : 0;
 
-    _transform = std::make_unique<InputTransform>(
+    __transform_creator = [=]() {
+        return std::make_unique<InputTransform>(
                      KernelRows,
                      KernelCols,
                      num_batches,
@@ -358,6 +361,9 @@ void CpuWinogradConv2dTransformInputKernel<T, OutputTileRows, OutputTileCols, Ke
                      padding_bottom, /**< Padding to apply to the bottom of the image. */
                      padding_right   /**< Padding to apply to the right of the image. */
                  );
+    };
+
+    _transform = __transform_creator();
 
     Window win;
     auto   win_last = _transform->get_window();
@@ -384,15 +390,16 @@ void CpuWinogradConv2dTransformInputKernel<T, OutputTileRows, OutputTileCols, Ke
     auto       output_ptr            = reinterpret_cast<T *>(output->buffer() + output->info()->offset_first_element_in_bytes());
     ARM_COMPUTE_ERROR_ON_NULLPTR(output_ptr);
 
-    _transform->set_input_tensor(input_nhwc_ptr, input_batch_stride, input_row_stride, input_col_stride);
-    _transform->set_output_matrices(output_ptr, _matrix_stride, _num_channels);
+    auto transform = __transform_creator();
+    transform->set_input_tensor(input_nhwc_ptr, input_batch_stride, input_row_stride, input_col_stride);
+    transform->set_output_matrices(output_ptr, _matrix_stride, _num_channels);
 
-    _transform->set_working_space(workspace->buffer());
+    transform->set_working_space(workspace->buffer());
 
     // The code below cannot be moved to configure because biases hasn't been allocated at that point
     const size_t fst = window.x().start();
     const size_t lst = window.x().end();
-    _transform->run(fst, lst, info.thread_id);
+    transform->run(fst, lst, info.thread_id);
 }
 
 template <typename T, int OutputTileRows, int OutputTileCols, int KernelRows, int KernelCols>
@@ -489,7 +496,11 @@ void CpuWinogradConv2dTransformOutputKernel<T, OutputTileRows, OutputTileCols, K
     _matrix_row_stride = roundup(num_channels, WinogradConv::N_BLOCK);
 
     // We don't have the biases buffer at this stage as it hasn't been allocated, we pass in nullptr OutputTransform is only used here to compute the window
-    _transform = std::make_unique<OutputTransform>(num_batches, num_rows, num_cols, num_channels, activation);
+    __transform_creator = [=]() {
+        return std::make_unique<OutputTransform>(num_batches, num_rows, num_cols, num_channels, activation);
+    };
+
+    _transform = __transform_creator();
     Window win;
     auto   win_last = _transform->get_window();
     win.set(Window::DimX, Window::Dimension(0, win_last, 1));
@@ -512,15 +523,16 @@ void CpuWinogradConv2dTransformOutputKernel<T, OutputTileRows, OutputTileCols, K
     const int out_row_stride   = dst_nhwc->info()->strides_in_bytes()[2] / sizeof(T);
     const int out_col_stride   = dst_nhwc->info()->strides_in_bytes()[1] / sizeof(T);
 
-    _transform->set_input_matrices(transformed_output->buffer(), _matrix_stride, _matrix_row_stride);
-    _transform->set_bias((biases ? reinterpret_cast<T *>(biases->buffer() + biases->info()->offset_first_element_in_bytes()) : nullptr));
-    _transform->set_output_tensor(dst_nhwc->buffer() + dst_nhwc->info()->offset_first_element_in_bytes(), out_batch_stride, out_row_stride, out_col_stride);
-    _transform->set_working_space(workspace->buffer());
+    auto transform = __transform_creator();
+    transform->set_input_matrices(transformed_output->buffer(), _matrix_stride, _matrix_row_stride);
+    transform->set_bias((biases ? reinterpret_cast<T *>(biases->buffer() + biases->info()->offset_first_element_in_bytes()) : nullptr));
+    transform->set_output_tensor(dst_nhwc->buffer() + dst_nhwc->info()->offset_first_element_in_bytes(), out_batch_stride, out_row_stride, out_col_stride);
+    transform->set_working_space(workspace->buffer());
 
     // The code below cannot be moved to configure because biases hasn't been allocated at that point
     const size_t fst = window.x().start();
     const size_t lst = window.x().end();
-    _transform->run(fst, lst, info.thread_id);
+    transform->run(fst, lst, info.thread_id);
 }
 
 template <typename T, int OutputTileRows, int OutputTileCols, int KernelRows, int KernelCols>
diff --git a/src/cpu/kernels/CpuWinogradConv2dKernel.h b/src/cpu/kernels/CpuWinogradConv2dKernel.h
index 6909216..8613ace 100644
--- a/src/cpu/kernels/CpuWinogradConv2dKernel.h
+++ b/src/cpu/kernels/CpuWinogradConv2dKernel.h
@@ -30,6 +30,8 @@
 
 #include "src/core/NEON/kernels/convolution/winograd/winograd_layer.hpp"
 
+#include <functional>
+
 namespace arm_compute
 {
 namespace cpu
@@ -213,6 +215,7 @@ private:
     std::unique_ptr<InputTransform> _transform{ nullptr };
     int                             _num_channels;  /**< Number of channels in input tensor. */
     int                             _matrix_stride; /**< Stride between output matrices. */
+    std::function<std::unique_ptr<InputTransform>()> __transform_creator;
 };
 
 /** Interface for the kernel to perform Winograd output transform. */
@@ -415,6 +418,7 @@ private:
     std::unique_ptr<OutputTransform> _transform{ nullptr };
     int                              _matrix_stride;
     int                              _matrix_row_stride;
+    std::function<std::unique_ptr<OutputTransform>()> __transform_creator;
 };
 
 /** Interface for the kernel to perform Winograd weights transform. */
@@ -550,6 +554,7 @@ private:
     using WeightsTransform = typename WinogradBase::template WeightsTransform<T, T>;
 
     std::unique_ptr<WeightsTransform> _transform{ nullptr };
+    int                               _num_input_channels;
     int                               _num_output_channels;
     int                               _matrix_stride;
 };
